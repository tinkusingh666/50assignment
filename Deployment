Rolling updates allow Deployments' update to take place with zero downtime by incrementally updating Pods instances with new ones. The new Pods will be scheduled on Nodes with available resources.
olling updates allow the following actions:

Promote an application from one environment to another (via container image updates)
Rollback to previous versions
Continuous Integration and Continuous Delivery of applications with zero downtime
To list the running Pods, run the get pods subcommand:
kubectl get pods
To view the current image version of the app, run the describe pods subcommand and look for the Image field:
kubectl describe pods
To update the image of the application to version 2, use the set image subcommand, followed by the deployment name and the new image version:
kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
The command notified the Deployment to use a different image for your app and initiated a rolling update. Check the status of the new Pods, and view the old one terminating with the get pods subcommand:
kubectl get pods
First, check that the app is running. To find the exposed IP address and port, run the describe service command:
kubectl describe services/kubernetes-bootcamp
Create an environment variable called NODE_PORT that has the value of the Node port assigned:

export NODE_PORT="$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')"
echo "NODE_PORT=$NODE_PORT"
Next, do a curl to the exposed IP and port:

curl http://"$(minikube ip):$NODE_PORT"
Every time you run the curl command, you will hit a different Pod. Notice that all Pods are now running the latest version (v2).
You can also confirm the update by running the rollout status subcommand:

kubectl rollout status deployments/kubernetes-bootcamp
To view the current image version of the app, run the describe pods subcommand:

kubectl describe pods
